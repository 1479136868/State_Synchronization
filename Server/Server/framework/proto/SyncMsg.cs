// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SyncMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace MyGame {

  #region Messages
  /// <summary>
  /////客户端----》服务器  
  ////服务器进行转发。  同步的消息
  /// </summary>
  public sealed class SyncMsg : pb::IMessage {
    private static readonly pb::MessageParser<SyncMsg> _parser = new pb::MessageParser<SyncMsg>(() => new SyncMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncMsg> Parser { get { return _parser; } }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private int userid_;
    /// <summary>
    ///发送者的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::MyGame.Vec3 pos_;
    /// <summary>
    ///目标位置。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MyGame.Vec3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "crtPos" field.</summary>
    public const int CrtPosFieldNumber = 3;
    private global::MyGame.Vec3 crtPos_;
    /// <summary>
    ///现在的位置。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MyGame.Vec3 CrtPos {
      get { return crtPos_; }
      set {
        crtPos_ = value;
      }
    }

    /// <summary>Field number for the "vel" field.</summary>
    public const int VelFieldNumber = 4;
    private global::MyGame.Vec3 vel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MyGame.Vec3 Vel {
      get { return vel_; }
      set {
        vel_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::MyGame.Vec3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MyGame.Vec3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Userid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (crtPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CrtPos);
      }
      if (vel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Vel);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (crtPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrtPos);
      }
      if (vel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vel);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Userid = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::MyGame.Vec3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (crtPos_ == null) {
              crtPos_ = new global::MyGame.Vec3();
            }
            input.ReadMessage(crtPos_);
            break;
          }
          case 34: {
            if (vel_ == null) {
              vel_ = new global::MyGame.Vec3();
            }
            input.ReadMessage(vel_);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              rotation_ = new global::MyGame.Vec3();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////代表位置，速度、朝向的向量消息
  /// </summary>
  public sealed class Vec3 : pb::IMessage {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
